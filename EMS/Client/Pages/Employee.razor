@page "/employee/{Id:int}"
@using System.Net
@using System.Net.Http.Json
@using EMS.Application.Common.Models;
@using EMS.Application.Features.Department.DTOs;
@using EMS.Application.Features.Employee.DTOs;
@using EMS.Application.Model.Employee;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@attribute [Authorize]
@inject HttpClient Http
@inject ILogger<Employee> Logger


<h2>Employee Form</h2>

<EditForm Model="@employee" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <CustomValidation @ref="customValidation" />
    <ValidationSummary />

    <p>
        <label>
            Name:
            <InputText @bind-Value="employee.Name" disabled="@disabled" />
        </label>
    </p>
    <p>
        <label>
            Email:
            <InputText @bind-Value="employee.Email"
                       disabled="@disabled" />
        </label>
    </p>
    <p>
        <label>
            Email:
            <InputDate @bind-Value="employee.DOB"
                       disabled="@disabled" />
        </label>
    </p>
    <p>
        <label>
            Department:
            <InputSelect @bind-Value="employee.DepartmentId" disabled="@disabled">
                @if (paginatedData != null)
                {
                    foreach (var item in paginatedData?.Items)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </InputSelect>
        </label>
    </p>

    <button type="submit" disabled="@disabled">Submit</button>
    <a href="/">Back to List</a>

    <p style="@messageStyles">
        @message
    </p>

</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool disabled;
    private string? message;
    private string? messageStyles = "visibility:hidden";
    private CustomValidation? customValidation;
    private UpdateEmployeeModel employee = new();

    private PaginatedData<DepartmentDto> paginatedData;

    private async Task HandleValidSubmit(EditContext editContext)
    {
        customValidation?.ClearErrors();

        try
        {
            HttpResponseMessage response = new();
            if (Id == 0)
                response = await Http.PostAsJsonAsync<UpdateEmployeeModel>(
                   "employee", (UpdateEmployeeModel)editContext.Model);
            else
            {
                response = await Http.PutAsJsonAsync<UpdateEmployeeModel>(
                    $"employee/{Id}", (UpdateEmployeeModel)editContext.Model);
            }


            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(
                    $"Validation failed. Status Code: {response.StatusCode}");
            }
            messageStyles = "color:green";
            message = Id == 0 ? "Employee Save Successfully" : "Employee Update Successfully";
        }
        catch (Exception ex)
        {
            Logger.LogError("Form processing error: {Message}", ex.Message);
            disabled = false;
            messageStyles = "color:red";
            message = "There was an error processing the form.";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var data = await Http.GetStringAsync("department");
        paginatedData = Newtonsoft.Json.JsonConvert.DeserializeObject<PaginatedData<DepartmentDto>>(data);
        if (Id != 0)
        {
            var emp = await Http.GetStringAsync($"employee?PageNumber=1&PageSize=1&AdvancedSearch.Fields=Id&AdvancedSearch.Keyword={Id}&Keyword={Id}");
            if (emp != null)
            {
                var res = Newtonsoft.Json.JsonConvert.DeserializeObject<PaginatedData<EmployeeDto>>(emp);
                if (res != null && res.Items?.Count() > 0)
                {
                    var result = res.Items.FirstOrDefault();
                    employee.DOB = result.DOB;
                    employee.DepartmentId = result.DepartmentId;
                    employee.Email = result.Email;
                    employee.Name = result.Name;
                    employee.Id = result.Id;
                }
            }
        }
    }
}
